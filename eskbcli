#!/usr/bin/env python3

import os
import argparse
import elasticsearch_kibana_cli


parser = argparse.ArgumentParser(
    description='Elasticsearch Kibana CLI v{}'.format(elasticsearch_kibana_cli.VERSION),
    add_help=False,
    epilog="""
        The Elasticsearch Kibana CLI provides a configurable programatic interface to query the Elasticsearch backend 
        via the Kibana frontend which is useful in situations where the Elasticsearch backend is not otherwise 
        accessible.  Configuration options are available that permit HTTP request header overrides that hence enable 
        access to Kibana in situations that require additional authentication such as when Kibana is behind an OAuth 
        reverse proxy.
    """,
)

parser.add_argument('-c', type=str, metavar='<filename>', default=None,
                    help='Configuration file to use, use this if the eskbcli.yml is not be automatically located.')

parser.add_argument('-s', type=str, metavar='<search>', default=None,
                    help='The search_definition name from configuration to use and execute')

parser.add_argument('-h', type=int, metavar='<hits>', default=None,
                    help='Search hit count limit, overrides the config value if set min=1, max=10000 (default:10000)')

parser.add_argument('-p', action='store_true', default=False,
                    help='Ping the Kibana endpoint before using this connection (default: False)')

parser.add_argument('-k', type=str, metavar='<kbn_version>', default=None,
                    help='Kibana version override, useful in various debugging situations')

parser.add_argument('-D', action='store_true', default=False,
                    help='List the configured search_definitions in config and immediately exit')

parser.add_argument('-d', action='store_true', default=False,
                    help='Debug level logging output (default: False)')


args = parser.parse_args()
if (args.s is None and args.D is False) or (args.h is not None and (args.h > 10000 or args.h < 1)):
    parser.print_help()
    exit(1)


if args.c is not None:
    config_filename_env_override = '{}_CONFIG_FILENAME'.format(
        elasticsearch_kibana_cli.NAME.replace('_', '').replace(' ', '').upper()
    )
    os.environ[config_filename_env_override] = args.c


if __name__ == '__main__':

    if args.D is True:
        elasticsearch_kibana_cli.ElasticsearchKibanaCLI(
            ping_connection=False,
            kbn_version='_',
            debug=args.d
        ).search_definitions()
    else:
        elasticsearch_kibana_cli.ElasticsearchKibanaCLI(
            ping_connection=args.p,
            kbn_version=args.k,
            debug=args.d
        ).msearch(search_definition=args.s, size=args.h)
